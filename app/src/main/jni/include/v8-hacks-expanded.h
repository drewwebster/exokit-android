# 1 "v8-hacks.h"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "v8-hacks.h"
# 42 "v8-hacks.h"
static inline v8::internal::Handle<v8::internal::TemplateInfo> OpenHandle(const Template* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::FunctionTemplateInfo> OpenHandle(const FunctionTemplate* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::ObjectTemplateInfo> OpenHandle(const ObjectTemplate* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::SignatureInfo> OpenHandle(const Signature* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::FunctionTemplateInfo> OpenHandle(const AccessorSignature* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::TypeSwitchInfo> OpenHandle(const TypeSwitch* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::Object> OpenHandle(const Data* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSRegExp> OpenHandle(const RegExp* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSObject> OpenHandle(const Object* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSArray> OpenHandle(const Array* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSArrayBuffer> OpenHandle(const ArrayBuffer* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSArrayBufferView> OpenHandle(const ArrayBufferView* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSTypedArray> OpenHandle(const TypedArray* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSTypedArray> OpenHandle(const Uint8Array* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::JSTypedArray> OpenHandle(const Uint8ClampedArray* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::JSTypedArray> OpenHandle(const Int8Array* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSTypedArray> OpenHandle(const Uint16Array* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::JSTypedArray> OpenHandle(const Int16Array* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::JSTypedArray> OpenHandle(const Uint32Array* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::JSTypedArray> OpenHandle(const Int32Array* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSTypedArray> OpenHandle(const Float32Array* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::JSTypedArray> OpenHandle(const Float64Array* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::JSDataView> OpenHandle(const DataView* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::String> OpenHandle(const String* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::Symbol> OpenHandle(const Symbol* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::JSFunction> OpenHandle(const Script* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::SharedFunctionInfo> OpenHandle(const UnboundScript* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSFunction> OpenHandle(const Function* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSMessageObject> OpenHandle(const Message* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::Context> OpenHandle(const Context* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::Object> OpenHandle(const External* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSArray> OpenHandle(const StackTrace* that, bool allow_empty_handle = false);
static inline v8::internal::Handle<v8::internal::JSObject> OpenHandle(const StackFrame* that, bool allow_empty_handle = false); static inline v8::internal::Handle<v8::internal::DeclaredAccessorDescriptor> OpenHandle(const DeclaredAccessorDescriptor* that, bool allow_empty_handle = false);
# 61 "v8-hacks.h"
v8::internal::Handle<v8::internal::TemplateInfo> Utils::OpenHandle( const v8::Template* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Template*>(that)))->IsTemplateInfo());
return v8::internal::Handle<v8::internal::TemplateInfo>( reinterpret_cast<v8::internal::TemplateInfo**>(const_cast<v8::Template*>(that))); } v8::internal::Handle<v8::internal::FunctionTemplateInfo> Utils::OpenHandle( const v8::FunctionTemplate* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::FunctionTemplate*>(that)))->IsFunctionTemplateInfo()); return v8::internal::Handle<v8::internal::FunctionTemplateInfo>( reinterpret_cast<v8::internal::FunctionTemplateInfo**>(const_cast<v8::FunctionTemplate*>(that))); } v8::internal::Handle<v8::internal::ObjectTemplateInfo> Utils::OpenHandle( const v8::ObjectTemplate* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::ObjectTemplate*>(that)))->IsObjectTemplateInfo()); return v8::internal::Handle<v8::internal::ObjectTemplateInfo>( reinterpret_cast<v8::internal::ObjectTemplateInfo**>(const_cast<v8::ObjectTemplate*>(that)));
} v8::internal::Handle<v8::internal::SignatureInfo> Utils::OpenHandle( const v8::Signature* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Signature*>(that)))->IsSignatureInfo());
return v8::internal::Handle<v8::internal::SignatureInfo>( reinterpret_cast<v8::internal::SignatureInfo**>(const_cast<v8::Signature*>(that))); } v8::internal::Handle<v8::internal::FunctionTemplateInfo> Utils::OpenHandle( const v8::AccessorSignature* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL);
EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::AccessorSignature*>(that)))->IsFunctionTemplateInfo()); return v8::internal::Handle<v8::internal::FunctionTemplateInfo>( reinterpret_cast<v8::internal::FunctionTemplateInfo**>(const_cast<v8::AccessorSignature*>(that))); } v8::internal::Handle<v8::internal::TypeSwitchInfo> Utils::OpenHandle( const v8::TypeSwitch* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::TypeSwitch*>(that)))->IsTypeSwitchInfo()); return v8::internal::Handle<v8::internal::TypeSwitchInfo>( reinterpret_cast<v8::internal::TypeSwitchInfo**>(const_cast<v8::TypeSwitch*>(that))); } v8::internal::Handle<v8::internal::Object> Utils::OpenHandle( const v8::Data* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Data*>(that)))->IsObject()); return v8::internal::Handle<v8::internal::Object>( reinterpret_cast<v8::internal::Object**>(const_cast<v8::Data*>(that))); } v8::internal::Handle<v8::internal::JSRegExp> Utils::OpenHandle( const v8::RegExp* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::RegExp*>(that)))->IsJSRegExp()); return v8::internal::Handle<v8::internal::JSRegExp>( reinterpret_cast<v8::internal::JSRegExp**>(const_cast<v8::RegExp*>(that))); } v8::internal::Handle<v8::internal::JSObject> Utils::OpenHandle( const v8::Object* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Object*>(that)))->IsJSObject()); return v8::internal::Handle<v8::internal::JSObject>( reinterpret_cast<v8::internal::JSObject**>(const_cast<v8::Object*>(that)));
} v8::internal::Handle<v8::internal::JSArray> Utils::OpenHandle( const v8::Array* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Array*>(that)))->IsJSArray()); return v8::internal::Handle<v8::internal::JSArray>( reinterpret_cast<v8::internal::JSArray**>(const_cast<v8::Array*>(that))); } 

v8::internal::Handle<v8::internal::JSArrayBuffer> Utils::OpenHandle( const v8::ArrayBuffer* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::ArrayBuffer*>(that)))->IsJSArrayBuffer()); return v8::internal::Handle<v8::internal::JSArrayBuffer>( reinterpret_cast<v8::internal::JSArrayBuffer**>(const_cast<v8::ArrayBuffer*>(that))); }
v8::internal::Handle<v8::internal::JSArrayBufferView> Utils::OpenHandle( const v8::ArrayBufferView* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::ArrayBufferView*>(that)))->IsJSArrayBufferView()); return v8::internal::Handle<v8::internal::JSArrayBufferView>( reinterpret_cast<v8::internal::JSArrayBufferView**>(const_cast<v8::ArrayBufferView*>(that))); }
v8::internal::Handle<v8::internal::JSTypedArray> Utils::OpenHandle( const v8::TypedArray* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::TypedArray*>(that)))->IsJSTypedArray()); return v8::internal::Handle<v8::internal::JSTypedArray>( reinterpret_cast<v8::internal::JSTypedArray**>(const_cast<v8::TypedArray*>(that))); } v8::internal::Handle<v8::internal::JSTypedArray> Utils::OpenHandle( const v8::Uint8Array* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Uint8Array*>(that)))->IsJSTypedArray()); return v8::internal::Handle<v8::internal::JSTypedArray>( reinterpret_cast<v8::internal::JSTypedArray**>(const_cast<v8::Uint8Array*>(that))); } v8::internal::Handle<v8::internal::JSTypedArray> Utils::OpenHandle( const v8::Uint8ClampedArray* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Uint8ClampedArray*>(that)))->IsJSTypedArray()); return v8::internal::Handle<v8::internal::JSTypedArray>( reinterpret_cast<v8::internal::JSTypedArray**>(const_cast<v8::Uint8ClampedArray*>(that))); } v8::internal::Handle<v8::internal::JSTypedArray> Utils::OpenHandle( const v8::Int8Array* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Int8Array*>(that)))->IsJSTypedArray()); return v8::internal::Handle<v8::internal::JSTypedArray>( reinterpret_cast<v8::internal::JSTypedArray**>(const_cast<v8::Int8Array*>(that))); } v8::internal::Handle<v8::internal::JSTypedArray> Utils::OpenHandle( const v8::Uint16Array* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Uint16Array*>(that)))->IsJSTypedArray()); return v8::internal::Handle<v8::internal::JSTypedArray>( reinterpret_cast<v8::internal::JSTypedArray**>(const_cast<v8::Uint16Array*>(that))); } v8::internal::Handle<v8::internal::JSTypedArray> Utils::OpenHandle( const v8::Int16Array* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Int16Array*>(that)))->IsJSTypedArray()); return v8::internal::Handle<v8::internal::JSTypedArray>( reinterpret_cast<v8::internal::JSTypedArray**>(const_cast<v8::Int16Array*>(that))); } v8::internal::Handle<v8::internal::JSTypedArray> Utils::OpenHandle( const v8::Uint32Array* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Uint32Array*>(that)))->IsJSTypedArray()); return v8::internal::Handle<v8::internal::JSTypedArray>( reinterpret_cast<v8::internal::JSTypedArray**>(const_cast<v8::Uint32Array*>(that))); } v8::internal::Handle<v8::internal::JSTypedArray> Utils::OpenHandle( const v8::Int32Array* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Int32Array*>(that)))->IsJSTypedArray()); return v8::internal::Handle<v8::internal::JSTypedArray>( reinterpret_cast<v8::internal::JSTypedArray**>(const_cast<v8::Int32Array*>(that))); } v8::internal::Handle<v8::internal::JSTypedArray> Utils::OpenHandle( const v8::Float32Array* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Float32Array*>(that)))->IsJSTypedArray()); return v8::internal::Handle<v8::internal::JSTypedArray>( reinterpret_cast<v8::internal::JSTypedArray**>(const_cast<v8::Float32Array*>(that))); } v8::internal::Handle<v8::internal::JSTypedArray> Utils::OpenHandle( const v8::Float64Array* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Float64Array*>(that)))->IsJSTypedArray()); return v8::internal::Handle<v8::internal::JSTypedArray>( reinterpret_cast<v8::internal::JSTypedArray**>(const_cast<v8::Float64Array*>(that))); } v8::internal::Handle<v8::internal::JSDataView> Utils::OpenHandle( const v8::DataView* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::DataView*>(that)))->IsJSDataView()); return v8::internal::Handle<v8::internal::JSDataView>( reinterpret_cast<v8::internal::JSDataView**>(const_cast<v8::DataView*>(that))); } v8::internal::Handle<v8::internal::String> Utils::OpenHandle( const v8::String* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::String*>(that)))->IsString()); return v8::internal::Handle<v8::internal::String>( reinterpret_cast<v8::internal::String**>(const_cast<v8::String*>(that))); } v8::internal::Handle<v8::internal::Symbol> Utils::OpenHandle( const v8::Symbol* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Symbol*>(that)))->IsSymbol()); return v8::internal::Handle<v8::internal::Symbol>( reinterpret_cast<v8::internal::Symbol**>(const_cast<v8::Symbol*>(that))); } v8::internal::Handle<v8::internal::JSFunction> Utils::OpenHandle( const v8::Script* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Script*>(that)))->IsJSFunction()); return v8::internal::Handle<v8::internal::JSFunction>( reinterpret_cast<v8::internal::JSFunction**>(const_cast<v8::Script*>(that))); } v8::internal::Handle<v8::internal::SharedFunctionInfo> Utils::OpenHandle( const v8::UnboundScript* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::UnboundScript*>(that)))->IsSharedFunctionInfo()); return v8::internal::Handle<v8::internal::SharedFunctionInfo>( reinterpret_cast<v8::internal::SharedFunctionInfo**>(const_cast<v8::UnboundScript*>(that))); } v8::internal::Handle<v8::internal::JSFunction> Utils::OpenHandle( const v8::Function* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Function*>(that)))->IsJSFunction()); return v8::internal::Handle<v8::internal::JSFunction>( reinterpret_cast<v8::internal::JSFunction**>(const_cast<v8::Function*>(that))); } v8::internal::Handle<v8::internal::JSMessageObject> Utils::OpenHandle( const v8::Message* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Message*>(that)))->IsJSMessageObject()); return v8::internal::Handle<v8::internal::JSMessageObject>( reinterpret_cast<v8::internal::JSMessageObject**>(const_cast<v8::Message*>(that))); } v8::internal::Handle<v8::internal::Context> Utils::OpenHandle( const v8::Context* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::Context*>(that)))->IsContext()); return v8::internal::Handle<v8::internal::Context>( reinterpret_cast<v8::internal::Context**>(const_cast<v8::Context*>(that))); } v8::internal::Handle<v8::internal::Object> Utils::OpenHandle( const v8::External* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::External*>(that)))->IsObject()); return v8::internal::Handle<v8::internal::Object>( reinterpret_cast<v8::internal::Object**>(const_cast<v8::External*>(that))); } v8::internal::Handle<v8::internal::JSArray> Utils::OpenHandle( const v8::StackTrace* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::StackTrace*>(that)))->IsJSArray()); return v8::internal::Handle<v8::internal::JSArray>( reinterpret_cast<v8::internal::JSArray**>(const_cast<v8::StackTrace*>(that))); } v8::internal::Handle<v8::internal::JSObject> Utils::OpenHandle( const v8::StackFrame* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::StackFrame*>(that)))->IsJSObject()); return v8::internal::Handle<v8::internal::JSObject>( reinterpret_cast<v8::internal::JSObject**>(const_cast<v8::StackFrame*>(that))); } v8::internal::Handle<v8::internal::DeclaredAccessorDescriptor> Utils::OpenHandle( const v8::DeclaredAccessorDescriptor* that, bool allow_empty_handle) { EXTRA_CHECK(allow_empty_handle || that != NULL); EXTRA_CHECK(that == NULL || (*reinterpret_cast<v8::internal::Object**>( const_cast<v8::DeclaredAccessorDescriptor*>(that)))->IsDeclaredAccessorDescriptor()); return v8::internal::Handle<v8::internal::DeclaredAccessorDescriptor>( reinterpret_cast<v8::internal::DeclaredAccessorDescriptor**>(const_cast<v8::DeclaredAccessorDescriptor*>(that))); }
